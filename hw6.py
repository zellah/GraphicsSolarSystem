from OpenGL.GLUT import *from OpenGL.GLU import *from OpenGL.GL import *import sysimport time#import imageLoader# A global variable storing our window ID# (not very pythonic by standard practice for OpenGL)window = 0ESCAPE = '\033' # The esc characterdef keyPressed(*args):    if args[0] == ESCAPE: 	# If escape is pressed, kill everything.        glutDestroyWindow(window)        sys.exit()def SolarSystem():    global angle    #rotation of the system around the origin (sun)    glRotate(angle, 0, 1, 0)    angle += .01        #the sun    Planet(1, 1, .8, 0, PlanetType.SUN)        #a planet with one moon    glPushMatrix()    #move so orbit has r=3    glTranslate(3,0,0)    #planet has radius 0.6, color (1, .3, 0)    Planet(.6, 1, .3, 0, PlanetType.MARS)    glPopMatrix()        #a planet with 2 moons and a satellite    glPushMatrix()    #move so orbit has r=8    glTranslate(8,0,0)    #planet has radius 0.8, color (.7, .7, 0)    Planet(.8, .7, .7, 0, PlanetType.SATURN)    glPopMatrix()class PlanetType(object):    SUN = 0    MARS = 1    SATURN = 2def Planet(r, c1, c2, c3, planet_type):    glColor3f(c1, c2, c3)    glutSolidSphere(r, 20, 20)    if planet_type == 1:        #Moon that starts above the planet        Moon(0,0,1)        #(technically, Mars actually has 2 moons...)    if planet_type == 2:            glPushMatrix()        #moon that starts above the planet        Moon(0,0,1)        glPopMatrix()        #moon with a satellite that starts right of the planet        Moon(1,0,0, True)def Moon(x, y, z, satellite = False):    glRotate(angle*8, x,y,z)    #Translate (in a different direction than the axis of rotation)    ## to move out of the planet's center    glTranslate(y*2, z*2, x*2)     glColor3f(.5, .5, .5)    glutSolidSphere(.2, 10, 10)    if satellite:        Satellite()def Satellite():    glRotate(angle*12, 1,0,0)    #Translate out of the moon's center    glTranslate(0, .5, 0)    glColor3f(0,0,0)    glutSolidSphere(.1, 5, 5)def mydisplay() :    global angle    global framecount    global start    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)    glLoadIdentity()    SolarSystem()    glutSwapBuffers()def drawSolarSystem():    global window    global angle    global framecount    global start    start = time.time()    framecount = 0    angle = 0    glutInit(sys.argv)    glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH)    glutInitWindowSize(400,400)    window = glutCreateWindow("hw6")    glutKeyboardFunc(keyPressed)    glClearColor(1,1,1,1)    glShadeModel(GL_SMOOTH)    glutDisplayFunc(mydisplay)    glEnable(GL_DEPTH_TEST)    glDepthFunc(GL_LEQUAL)    glutIdleFunc(mydisplay)        #Lighting    glEnable(GL_LIGHTING)    glEnable(GL_LIGHT0)    glEnable(GL_COLOR_MATERIAL)    glLightfv(GL_LIGHT0, GL_DIFFUSE, (1,1,1))    #glLightfv(GL_LIGHT0, GL_POSITION, (2,2,4,0))    #glLightfv(GL_LIGHT0, GL_SPOT_DIRECTION, (-2,-2,-4))        '''    #Texture    global texture    texture= glGenTextures(1); # number of textures to generate                                                   glBindTexture(GL_TEXTURE_2D, texture    glPixelStorei(GL_UNPACK_ALIGNMENT,1)    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT)    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT)    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR)    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR)    img = imageLoader.loadImage("gravel_texture_gif.gif")    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, img.width, img.height, 0,               GL_RGB, GL_UNSIGNED_BYTE, img.data)    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL)    glEnable(GL_TEXTURE_2D)    '''    #glEnable(GL_CULL_FACE)    glMatrixMode(GL_PROJECTION)    glLoadIdentity()    gluPerspective(45, 1, 0.1, 100)    gluLookAt(0, 10, 20, 0, 0, 0, 0, 1, 0)    glMatrixMode(GL_MODELVIEW)    glLoadIdentity()        glutMainLoop();drawSolarSystem()